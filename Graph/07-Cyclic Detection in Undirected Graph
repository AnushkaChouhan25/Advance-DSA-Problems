class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean vis[] = new boolean[V];
        for(int i = 0; i < adj.size(); i++){
            if(!vis[i]){
                if(dfs(adj, vis, i, -1)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean dfs(ArrayList<ArrayList<Integer>> adj, boolean vis[], int curr, int par){
        vis[curr] = true;
        
        for(int i = 0; i < adj.get(curr).size() ; i++){
            int e = adj.get(curr).get(i);
            if(!vis[e]){
                if(dfs(adj, vis, e, curr)){
                    return true;
                }
            }
            else if(vis[e] && e != par){
                return true;
            }
        }
        return false;
    }
}