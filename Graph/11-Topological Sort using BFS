
class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        Queue<Integer> q = new LinkedList<>();
        int[] ans = new int[V];
        int[] indeg = new int[V];
        findIndeg(V, adj, indeg);
        int idx =0;
        for(int i = 0; i< V; i++){
            if(indeg[i] == 0) q.add(i);
        }
        while(!q.isEmpty()){ //bfs
            int curr = q.remove();
            ans[idx++] = curr;
            
            for(int i = 0; i < adj.get(curr).size(); i++){
                int neigh = adj.get(curr).get(i);
                indeg[neigh]--;
                
                if(indeg[neigh] == 0) q.add(neigh);
            }
        }
        return ans;
    }
    public static void findIndeg(int v, ArrayList<ArrayList<Integer>> adj, int[] indeg){
        for(int i = 0; i<v; i++){
            for(int j = 0; j< adj.get(i).size(); j++){
                indeg[adj.get(i).get(j)]++;
            }
        }
    }
}