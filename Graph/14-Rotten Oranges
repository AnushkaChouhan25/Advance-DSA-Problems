class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) return 0;

        int rows = grid.length;
        int cols = grid[0].length;
        Queue<int[]> que = new LinkedList<>();
        int freshCount = 0;

        for(int i = 0; i < rows; i++){
            for(int j = 0; j<cols; j++){
                if(grid[i][j] == 2) que.offer(new int[]{i,j});

                if(grid[i][j] != 0) freshCount++; 
            }
        }
        int []dx = {0,0,1,-1};
        int []dy = {1,-1,0,0};

        int countmin = 0, cnt = 0;
        while(!que.isEmpty()){
            int size = que.size();
            cnt += size;

            for(int i = 0; i < size; i++){
                int[] points = que.poll();
                for(int j =0; j < 4; j++){
                    int x = points[0] + dx[j];
                    int y = points[1] + dy[j];

                    if(x < 0|| y < 0 || x >= rows || y>= cols || grid[x][y] == 2 || grid[x][y] ==0) continue;

                    grid[x][y] = 2;
                    que.offer(new int[]{x,y});
                }
            }
            if(que.size() != 0) {
                countmin++;
            }
        }
        return freshCount == cnt ? countmin : -1;
    }
}